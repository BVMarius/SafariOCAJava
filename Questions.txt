Q1)
Given:
 class X {
    static int MAX_VAL = 100;
    int value = 99;
    public void setVal(int x) {
      if (x <= MAX_VAL) value = x;
    }
  }
And:
    X a = new X();
    X b = new X();
    a.setVal(120);
    System.out.print(a.value + ", ");
    b.MAX_VAL = 150; // EXACTLY EQUIVALENT to X.MAX_VAL!!!!
    a.setVal(140);
    System.out.println(a.value);

What is the result?
    A) 99, 99
    B) 120, 140
    C) 99, 140
    D) Compilation failure
    E) Exception at runtime

Q2)
Given:
  class Y {
    static String sayHi() { return "Y-Hello"; }
    String sayHi2() { return "Y-Hello2"; }
  }
And:
  class Z extends Y {
    static String sayHi() { return "Z-Hello"; }
    String sayHi2() { return "Z-Hello2"; }
  }
And this code fragment:
    Y y = new Z();
    System.out.println(y.sayHi() + ", " + y.sayHi2());

What is the result?
    A) Y-Hello, Y-Hello2
    B) Y-Hello, Z-Hello2
    C) Z-Hello, Z-Hello2
    D) Z-Hello, Y-Hello2
    E) Compilation fails

Q3)
given (all the Date/Holiday code and...)

    _____ () {
        return "Holiday called " +  name;
    }

What must fill the blank to cause current test code to output: Holiday called DecemberDay!

No A) String toString
No B) void toString
No C) @Override String toString
Yes D) public String toString
No E) None of the above!

Q4)
Given:
  class Base {
    void doBaseStuff() { System.out.println("doBaseStuff"); }
  }
and:
  class Sub extends Base {
    void doBaseStuff() { System.out.println("doSubStuff"); }
    void doOtherStuff() { System.out.println("doOtherStuff"); }
  }

In the Base and Sub classes, which are true in isolation?
No  A) doBaseStuff in Base can be marked public without causing errors
Yes B) doBaseStuff in Base can be marked private without causing errors
Yes C) doBaseStuff in Sub can be marked public without causing errors
Yes D) doBaseStuff in Sub can be marked protected without causing errors
No  E) doBaseStuff in Sub can be marked private without causing errors

